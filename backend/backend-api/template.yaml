AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Well-Architected Review Simulator - Backend API

Globals:
  Function:
    Timeout: 10
    Runtime: python3.13
    LoggingConfig:
      LogFormat: JSON

Resources:
  StaticSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  StaticSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticSiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"
            Action: "s3:GetObject"
            Resource: !Sub "${StaticSiteBucket.Arn}/*"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt StaticSiteBucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref OriginAccessControl
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
          DefaultTTL: 86400
          MaxTTL: 31536000
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        PriceClass: PriceClass_100
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-OAC"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4


  ReviewApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.13
      Environment:
        Variables:
          TABLE_NAME: !Ref ReviewTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ReviewTable
      Events:
        GetQuestions:
          Type: Api
          Properties:
            Path: /questions
            Method: GET
            RestApiId: !Ref ReviewApi
        GetQuestionsOptions:
          Type: Api
          Properties:
            Path: /questions
            Method: OPTIONS
            RestApiId: !Ref ReviewApi
        SubmitReview:
          Type: Api
          Properties:
            Path: /submit-review
            Method: POST
            RestApiId: !Ref ReviewApi
        SubmitReviewOptions:
          Type: Api
          Properties:
            Path: /submit-review
            Method: OPTIONS
            RestApiId: !Ref ReviewApi

  ReviewApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  ReviewTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WellArchitectedReviews
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: review_id
          AttributeType: S
      KeySchema:
        - AttributeName: review_id
          KeyType: HASH

Outputs:
  ApiUrl:
    Description: API Gateway base URL for the backend
    Value: !Sub "https://${ReviewApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  CloudFrontUrl:
    Description: CloudFront distribution URL for the frontend
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
  S3BucketName:
    Description: S3 bucket name for static website hosting
    Value: !Ref StaticSiteBucket
  LambdaFunction:
    Description: Lambda function used for handling questions and reviews
    Value: !GetAtt ReviewApiFunction.Arn
  DynamoDBTable:
    Description: DynamoDB table storing the reviews
    Value: !Ref ReviewTable